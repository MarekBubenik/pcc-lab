---
# Package installation
- name: Make sure the latest {{ deb_pkg }} package is installed (Ubuntu)
  ansible.builtin.apt:
    name:
      - "{{ deb_pkg }}"
    update_cache: true
    state: latest
  when: ansible_facts['os_family'] == 'Debian'

- name: Make sure the latest {{ rpm_pkg }} package is installed (RedHat)
  ansible.builtin.dnf:
    name:
      - "{{ rpm_pkg }}"
    update_cache: true
    state: latest
  when: ansible_facts['os_family'] == 'RedHat'

# Copy policy to remote
- name: Copy policy content to target server (Ubuntu)
  ansible.builtin.copy:
    src: "files/{{ debPolicyName }}"
    dest: "{{ tmpDest }}"
    remote_src: no
  when: ansible_facts['os_family'] == 'Debian'

- name: Copy policy content to target server (RedHat)
  ansible.builtin.copy:
    src: "files/{{ rpmPolicyName }}"
    dest: "{{ tmpDest }}"
    remote_src: no
  when: ansible_facts['os_family'] == 'RedHat'

# Run evaluation
- name: Run OpenSCAP evaluation (Ubuntu)
  ansible.builtin.command: >
    oscap xccdf eval
    --profile "{{ debProfileID }}"
    --results "{{ tmpResultsFile }}"
    --report "{{ tmpReportFile }}"
    "/tmp/{{ debPolicyName }}"
  register: openscap_results
  no_log: true
  ignore_errors: true
  when: ansible_facts['os_family'] == 'Debian'

- name: Run OpenSCAP evaluation (RedHat)
  ansible.builtin.command: >
    oscap xccdf eval
    --profile "{{ rpmProfileID }}"
    --results "{{ tmpResultsFile }}"
    --report "{{ tmpReportFile }}"
    "/tmp/{{ rpmPolicyName }}"
  register: openscap_results
  no_log: true
  ignore_errors: true
  when: ansible_facts['os_family'] == 'RedHat'

# Fetch files
- name: Fetch OpenSCAP results to Ansible control server
  ansible.builtin.fetch:
    src: "{{ tmpResultsFile }}"
    dest: "{{ inventory_hostname }}_openscap_result.xml"
    flat: yes

- name: Fetch OpenSCAP report to Ansible control server
  ansible.builtin.fetch:
    src: "{{ tmpReportFile }}"
    dest: "{{ inventory_hostname }}_openscap_report.html"
    flat: yes

# Cleanup
- name: Clean up temporary results files
  ansible.builtin.file:
    path: "{{ tmpResultsFile }}"
    state: absent

- name: Clean up temporary report files
  ansible.builtin.file:
    path: "{{ tmpReportFile }}" 
    state: absent

- name: Clean up policy content file (Ubuntu)
  ansible.builtin.file:
    path: "/tmp/{{ debPolicyName }}"
    state: absent
  when: ansible_facts['os_family'] == 'Debian'

- name: Clean up policy content file (RedHat)
  ansible.builtin.file:
    path: "/tmp/{{ rpmPolicyName }}"
    state: absent
  when: ansible_facts['os_family'] == 'RedHat'